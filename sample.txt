@transaction.atomic
    def update(self, instance, validated_data):
        for field in instance._meta.fields:
            field_name = field.name
            if field_name in validated_data:
                setattr(instance, field_name, validated_data[field_name])
        instance.save()
        current_user = instance.updated_by if instance.updated_by else None

        requested_items_data = validated_data.get('procurement_indent_item_indent', [])
        existing_items = instance.procurement_indent_item_indent.filter(is_deleted=False)
        stages_data = validated_data.get('procurement_indent_stages', [])
        existing_stages = instance.procurement_indent_stages.filter(is_deleted=False)
        attachments = validated_data.pop('procurement_indent_attachments', [])

        for requested_item_data in requested_items_data:
            item_id = requested_item_data.get('id')
            material_request_item = requested_item_data.get('material_request_item', None)
            if not material_request_item is None:
                if material_request_item.status != 'approved':
                    raise APIException({'request_status': 0, 'msg': "material_request_item not approved"})
            existing_item = next((item for item in existing_items if item.id == item_id), None)

            notes_data = requested_item_data.pop('notes', [])
            if not existing_item:
                existing_item = IndentItems.objects.create(indent=instance, created_by=current_user, **requested_item_data)
            else:
                for field in existing_item._meta.fields:
                    field_name = field.name
                    if field_name in requested_item_data:
                        setattr(existing_item, field_name, requested_item_data[field_name])
                setattr(existing_item, 'updated_by', current_user)
                existing_item.save()

            existing_notes = existing_item.procurement_indent_item_notes.filter(is_deleted=False)

            for note_data in notes_data:
                note_id = note_data.get('id')
                existing_note = next((note for note in existing_notes if note.id == note_id), None)
                if not existing_note:
                    existing_note = IndentItemsNotes.objects.create(indent_items=existing_item, created_by=current_user, **note_data)
                else:
                    for note_field in existing_note._meta.fields:
                        note_field_name = note_field.name
                        if note_field_name in note_data:
                            setattr(existing_note, note_field_name, note_data[note_field_name])
                    setattr(existing_note, 'updated_by', current_user)
                    existing_note.save()

            for existing_note in existing_notes:
                if existing_note.id not in [note_data.get('id') for note_data in notes_data]:
                    setattr(existing_note, "is_deleted", True)
                    setattr(existing_note, "updated_by", current_user)
                    existing_note.save()

        for existing_item in existing_items:
            if existing_item.id not in [item_data.get('id') for item_data in requested_items_data]:
                setattr(existing_item, 'is_deleted', True)
                setattr(existing_item, 'updated_by', current_user)
            existing_item.save()

        for item_data in stages_data:
            item_id = item_data.get('id')
            existing_item = next((item for item in existing_stages if item.id == item_id), None)
            if not existing_item:
                existing_item = IndentStages.objects.create(indent=instance, created_by=current_user, **item_data)
            else:
                for field in existing_item._meta.fields:
                    field_name = field.name
                    if field_name in item_data:
                        setattr(existing_item, field_name, item_data[field_name])
                setattr(existing_item, 'updated_by', current_user)
                existing_item.save()

        for existing_item in existing_stages:
            if existing_item.id not in [item_data.get('id') for item_data in stages_data]:
                setattr(existing_item, 'is_deleted', True)
                setattr(existing_item, 'updated_by', current_user)
                existing_item.save()


        ''' 5.  update/insert attachments âœ… '''
        # old_ids = [item.pk for item in instance.procurement_indent_attachments.filter(is_deleted=False)]
        # updated_ids = []
        for requested_attachment_data in attachments:
            id = requested_attachment_data.pop('id', None)
            if not id:
                print('attachment added')
                _obj = IndentAttachments.objects.create(
                    organization=instance.organization,
                    master=instance,
                    created_by=current_user,
                    attachment=process_attachments(requested_attachment_data),
                    file_data="",
                    mime_type="",
                )
                id = _obj.pk
            else:
                print(f'attachment updated {id}')
                _obj, created = IndentAttachments.objects.update_or_create(
                    pk=id,
                    defaults={
                        "master": instance,
                        "organization": instance.organization,
                        "attachment": process_attachments(requested_attachment_data),
                        "updated_by": current_user
                    }
                )
            # updated_ids.append(id)

        # # soft remove excluded items
        # excluded_ids = list(set(old_ids) - set(updated_ids))
        # _ = IndentAttachments.objects.filter(pk__in=excluded_ids).update(is_deleted=True, updated_by=current_user)
        # print('deleted IndentAttachments ', _)

        instance.save()
        return instance
